@page "/makes/"
@using Microsoft.AspNetCore.Authorization
@inject HttpClient _client
@inject IJSRuntime Js
@attribute [Authorize]

<h3 class="card-title">Car Makes</h3>
<hr />
<br />

@if (Makes == null)
{
  <div class="alert alert-info">Loading Makes</div>
}
else
{
  <table class = "table table-responsive">
    <thead>
    <tr>
      <th>Name</th>
      <th>Actions</th>
    </tr>
    </thead>
  </table>
  <tbody>
  @foreach (var make in Makes)
  {
    <tr>
      <td>@make.Name</td>
      <td>
        <a href = "/makes/view/@make.Id" class = "btn btn-primary">
          <span class="oi oi-book"></span>
        </a>&nbsp;
        <a href = "/makes/edit/@make.Id" class = "btn btn-primary">
          <span class = "oi oi-pencil"></span>
        </a>&nbsp;
        <button class = "btn btn-danger" @onclick= "@(() => Delete(make.Id))">
          <span class="oi oi-delete"></span>
        </button>
      </td>
    </tr>
  }
  </tbody>
}


@code {
  private List<Make> Makes;

  protected async override Task OnInitializedAsync()
  {
    Makes = await _client.GetFromJsonAsync<List<Make>>(Endpoints.MakeEndpoint);
  }


  async Task Delete(int id)
  {
    var make = Makes.First(q => q.Id == id);
    var confirm = await Js.InvokeAsync<bool>("confirm", $"Do you want to Delete {make.Name}?");
    if (confirm){

      await _client.DeleteAsync($"{Endpoints.MakeEndpoint}/{id}");
    await OnInitializedAsync();
  }

}

}
